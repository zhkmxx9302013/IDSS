// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file.proto

#ifndef PROTOBUF_file_2eproto__INCLUDED
#define PROTOBUF_file_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_file_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsrule_file_infoImpl();
void InitDefaultsrule_file_info();
void InitDefaultsrule_file_chkImpl();
void InitDefaultsrule_file_chk();
void InitDefaultsrule_namesImpl();
void InitDefaultsrule_names();
void InitDefaultsfact_namesImpl();
void InitDefaultsfact_names();
void InitDefaultsfact_file_infoImpl();
void InitDefaultsfact_file_info();
void InitDefaultsfact_file_chkImpl();
void InitDefaultsfact_file_chk();
void InitDefaultsfact_listImpl();
void InitDefaultsfact_list();
void InitDefaultsfact_varImpl();
void InitDefaultsfact_var();
void InitDefaultsmapperImpl();
void InitDefaultsmapper();
inline void InitDefaults() {
  InitDefaultsrule_file_info();
  InitDefaultsrule_file_chk();
  InitDefaultsrule_names();
  InitDefaultsfact_names();
  InitDefaultsfact_file_info();
  InitDefaultsfact_file_chk();
  InitDefaultsfact_list();
  InitDefaultsfact_var();
  InitDefaultsmapper();
}
}  // namespace protobuf_file_2eproto
namespace buaa {
namespace file {
class fact_file_chk;
class fact_file_chkDefaultTypeInternal;
extern fact_file_chkDefaultTypeInternal _fact_file_chk_default_instance_;
class fact_file_info;
class fact_file_infoDefaultTypeInternal;
extern fact_file_infoDefaultTypeInternal _fact_file_info_default_instance_;
class fact_list;
class fact_listDefaultTypeInternal;
extern fact_listDefaultTypeInternal _fact_list_default_instance_;
class fact_names;
class fact_namesDefaultTypeInternal;
extern fact_namesDefaultTypeInternal _fact_names_default_instance_;
class fact_var;
class fact_varDefaultTypeInternal;
extern fact_varDefaultTypeInternal _fact_var_default_instance_;
class mapper;
class mapperDefaultTypeInternal;
extern mapperDefaultTypeInternal _mapper_default_instance_;
class rule_file_chk;
class rule_file_chkDefaultTypeInternal;
extern rule_file_chkDefaultTypeInternal _rule_file_chk_default_instance_;
class rule_file_info;
class rule_file_infoDefaultTypeInternal;
extern rule_file_infoDefaultTypeInternal _rule_file_info_default_instance_;
class rule_names;
class rule_namesDefaultTypeInternal;
extern rule_namesDefaultTypeInternal _rule_names_default_instance_;
}  // namespace file
}  // namespace buaa
namespace buaa {
namespace file {

// ===================================================================

class rule_file_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buaa.file.rule_file_info) */ {
 public:
  rule_file_info();
  virtual ~rule_file_info();

  rule_file_info(const rule_file_info& from);

  inline rule_file_info& operator=(const rule_file_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rule_file_info(rule_file_info&& from) noexcept
    : rule_file_info() {
    *this = ::std::move(from);
  }

  inline rule_file_info& operator=(rule_file_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rule_file_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rule_file_info* internal_default_instance() {
    return reinterpret_cast<const rule_file_info*>(
               &_rule_file_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(rule_file_info* other);
  friend void swap(rule_file_info& a, rule_file_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rule_file_info* New() const PROTOBUF_FINAL { return New(NULL); }

  rule_file_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rule_file_info& from);
  void MergeFrom(const rule_file_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rule_file_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes file_name = 1;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const void* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // bytes file_desc = 2;
  void clear_file_desc();
  static const int kFileDescFieldNumber = 2;
  const ::std::string& file_desc() const;
  void set_file_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_file_desc(::std::string&& value);
  #endif
  void set_file_desc(const char* value);
  void set_file_desc(const void* value, size_t size);
  ::std::string* mutable_file_desc();
  ::std::string* release_file_desc();
  void set_allocated_file_desc(::std::string* file_desc);

  // bytes create_time = 3;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 3;
  const ::std::string& create_time() const;
  void set_create_time(const ::std::string& value);
  #if LANG_CXX11
  void set_create_time(::std::string&& value);
  #endif
  void set_create_time(const char* value);
  void set_create_time(const void* value, size_t size);
  ::std::string* mutable_create_time();
  ::std::string* release_create_time();
  void set_allocated_create_time(::std::string* create_time);

  // @@protoc_insertion_point(class_scope:buaa.file.rule_file_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr file_desc_;
  ::google::protobuf::internal::ArenaStringPtr create_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_2eproto::TableStruct;
  friend void ::protobuf_file_2eproto::InitDefaultsrule_file_infoImpl();
};
// -------------------------------------------------------------------

class rule_file_chk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buaa.file.rule_file_chk) */ {
 public:
  rule_file_chk();
  virtual ~rule_file_chk();

  rule_file_chk(const rule_file_chk& from);

  inline rule_file_chk& operator=(const rule_file_chk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rule_file_chk(rule_file_chk&& from) noexcept
    : rule_file_chk() {
    *this = ::std::move(from);
  }

  inline rule_file_chk& operator=(rule_file_chk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rule_file_chk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rule_file_chk* internal_default_instance() {
    return reinterpret_cast<const rule_file_chk*>(
               &_rule_file_chk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(rule_file_chk* other);
  friend void swap(rule_file_chk& a, rule_file_chk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rule_file_chk* New() const PROTOBUF_FINAL { return New(NULL); }

  rule_file_chk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rule_file_chk& from);
  void MergeFrom(const rule_file_chk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rule_file_chk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes filename = 2;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const void* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // bool ischeck = 1;
  void clear_ischeck();
  static const int kIscheckFieldNumber = 1;
  bool ischeck() const;
  void set_ischeck(bool value);

  // @@protoc_insertion_point(class_scope:buaa.file.rule_file_chk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  bool ischeck_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_2eproto::TableStruct;
  friend void ::protobuf_file_2eproto::InitDefaultsrule_file_chkImpl();
};
// -------------------------------------------------------------------

class rule_names : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buaa.file.rule_names) */ {
 public:
  rule_names();
  virtual ~rule_names();

  rule_names(const rule_names& from);

  inline rule_names& operator=(const rule_names& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rule_names(rule_names&& from) noexcept
    : rule_names() {
    *this = ::std::move(from);
  }

  inline rule_names& operator=(rule_names&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rule_names& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rule_names* internal_default_instance() {
    return reinterpret_cast<const rule_names*>(
               &_rule_names_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(rule_names* other);
  friend void swap(rule_names& a, rule_names& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rule_names* New() const PROTOBUF_FINAL { return New(NULL); }

  rule_names* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rule_names& from);
  void MergeFrom(const rule_names& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rule_names* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes rule_name = 1;
  void clear_rule_name();
  static const int kRuleNameFieldNumber = 1;
  const ::std::string& rule_name() const;
  void set_rule_name(const ::std::string& value);
  #if LANG_CXX11
  void set_rule_name(::std::string&& value);
  #endif
  void set_rule_name(const char* value);
  void set_rule_name(const void* value, size_t size);
  ::std::string* mutable_rule_name();
  ::std::string* release_rule_name();
  void set_allocated_rule_name(::std::string* rule_name);

  // @@protoc_insertion_point(class_scope:buaa.file.rule_names)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rule_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_2eproto::TableStruct;
  friend void ::protobuf_file_2eproto::InitDefaultsrule_namesImpl();
};
// -------------------------------------------------------------------

class fact_names : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buaa.file.fact_names) */ {
 public:
  fact_names();
  virtual ~fact_names();

  fact_names(const fact_names& from);

  inline fact_names& operator=(const fact_names& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  fact_names(fact_names&& from) noexcept
    : fact_names() {
    *this = ::std::move(from);
  }

  inline fact_names& operator=(fact_names&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const fact_names& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const fact_names* internal_default_instance() {
    return reinterpret_cast<const fact_names*>(
               &_fact_names_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(fact_names* other);
  friend void swap(fact_names& a, fact_names& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline fact_names* New() const PROTOBUF_FINAL { return New(NULL); }

  fact_names* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const fact_names& from);
  void MergeFrom(const fact_names& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(fact_names* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes fact_name = 1;
  void clear_fact_name();
  static const int kFactNameFieldNumber = 1;
  const ::std::string& fact_name() const;
  void set_fact_name(const ::std::string& value);
  #if LANG_CXX11
  void set_fact_name(::std::string&& value);
  #endif
  void set_fact_name(const char* value);
  void set_fact_name(const void* value, size_t size);
  ::std::string* mutable_fact_name();
  ::std::string* release_fact_name();
  void set_allocated_fact_name(::std::string* fact_name);

  // @@protoc_insertion_point(class_scope:buaa.file.fact_names)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fact_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_2eproto::TableStruct;
  friend void ::protobuf_file_2eproto::InitDefaultsfact_namesImpl();
};
// -------------------------------------------------------------------

class fact_file_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buaa.file.fact_file_info) */ {
 public:
  fact_file_info();
  virtual ~fact_file_info();

  fact_file_info(const fact_file_info& from);

  inline fact_file_info& operator=(const fact_file_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  fact_file_info(fact_file_info&& from) noexcept
    : fact_file_info() {
    *this = ::std::move(from);
  }

  inline fact_file_info& operator=(fact_file_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const fact_file_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const fact_file_info* internal_default_instance() {
    return reinterpret_cast<const fact_file_info*>(
               &_fact_file_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(fact_file_info* other);
  friend void swap(fact_file_info& a, fact_file_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline fact_file_info* New() const PROTOBUF_FINAL { return New(NULL); }

  fact_file_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const fact_file_info& from);
  void MergeFrom(const fact_file_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(fact_file_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes file_name = 1;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const void* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // bytes file_desc = 2;
  void clear_file_desc();
  static const int kFileDescFieldNumber = 2;
  const ::std::string& file_desc() const;
  void set_file_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_file_desc(::std::string&& value);
  #endif
  void set_file_desc(const char* value);
  void set_file_desc(const void* value, size_t size);
  ::std::string* mutable_file_desc();
  ::std::string* release_file_desc();
  void set_allocated_file_desc(::std::string* file_desc);

  // bytes create_time = 3;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 3;
  const ::std::string& create_time() const;
  void set_create_time(const ::std::string& value);
  #if LANG_CXX11
  void set_create_time(::std::string&& value);
  #endif
  void set_create_time(const char* value);
  void set_create_time(const void* value, size_t size);
  ::std::string* mutable_create_time();
  ::std::string* release_create_time();
  void set_allocated_create_time(::std::string* create_time);

  // @@protoc_insertion_point(class_scope:buaa.file.fact_file_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr file_desc_;
  ::google::protobuf::internal::ArenaStringPtr create_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_2eproto::TableStruct;
  friend void ::protobuf_file_2eproto::InitDefaultsfact_file_infoImpl();
};
// -------------------------------------------------------------------

class fact_file_chk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buaa.file.fact_file_chk) */ {
 public:
  fact_file_chk();
  virtual ~fact_file_chk();

  fact_file_chk(const fact_file_chk& from);

  inline fact_file_chk& operator=(const fact_file_chk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  fact_file_chk(fact_file_chk&& from) noexcept
    : fact_file_chk() {
    *this = ::std::move(from);
  }

  inline fact_file_chk& operator=(fact_file_chk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const fact_file_chk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const fact_file_chk* internal_default_instance() {
    return reinterpret_cast<const fact_file_chk*>(
               &_fact_file_chk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(fact_file_chk* other);
  friend void swap(fact_file_chk& a, fact_file_chk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline fact_file_chk* New() const PROTOBUF_FINAL { return New(NULL); }

  fact_file_chk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const fact_file_chk& from);
  void MergeFrom(const fact_file_chk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(fact_file_chk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes filename = 2;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const void* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // bool ischeck = 1;
  void clear_ischeck();
  static const int kIscheckFieldNumber = 1;
  bool ischeck() const;
  void set_ischeck(bool value);

  // @@protoc_insertion_point(class_scope:buaa.file.fact_file_chk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  bool ischeck_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_2eproto::TableStruct;
  friend void ::protobuf_file_2eproto::InitDefaultsfact_file_chkImpl();
};
// -------------------------------------------------------------------

class fact_list : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buaa.file.fact_list) */ {
 public:
  fact_list();
  virtual ~fact_list();

  fact_list(const fact_list& from);

  inline fact_list& operator=(const fact_list& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  fact_list(fact_list&& from) noexcept
    : fact_list() {
    *this = ::std::move(from);
  }

  inline fact_list& operator=(fact_list&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const fact_list& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const fact_list* internal_default_instance() {
    return reinterpret_cast<const fact_list*>(
               &_fact_list_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(fact_list* other);
  friend void swap(fact_list& a, fact_list& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline fact_list* New() const PROTOBUF_FINAL { return New(NULL); }

  fact_list* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const fact_list& from);
  void MergeFrom(const fact_list& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(fact_list* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes template_name = 1;
  void clear_template_name();
  static const int kTemplateNameFieldNumber = 1;
  const ::std::string& template_name() const;
  void set_template_name(const ::std::string& value);
  #if LANG_CXX11
  void set_template_name(::std::string&& value);
  #endif
  void set_template_name(const char* value);
  void set_template_name(const void* value, size_t size);
  ::std::string* mutable_template_name();
  ::std::string* release_template_name();
  void set_allocated_template_name(::std::string* template_name);

  // bytes slot_name = 2;
  void clear_slot_name();
  static const int kSlotNameFieldNumber = 2;
  const ::std::string& slot_name() const;
  void set_slot_name(const ::std::string& value);
  #if LANG_CXX11
  void set_slot_name(::std::string&& value);
  #endif
  void set_slot_name(const char* value);
  void set_slot_name(const void* value, size_t size);
  ::std::string* mutable_slot_name();
  ::std::string* release_slot_name();
  void set_allocated_slot_name(::std::string* slot_name);

  // @@protoc_insertion_point(class_scope:buaa.file.fact_list)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr template_name_;
  ::google::protobuf::internal::ArenaStringPtr slot_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_2eproto::TableStruct;
  friend void ::protobuf_file_2eproto::InitDefaultsfact_listImpl();
};
// -------------------------------------------------------------------

class fact_var : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buaa.file.fact_var) */ {
 public:
  fact_var();
  virtual ~fact_var();

  fact_var(const fact_var& from);

  inline fact_var& operator=(const fact_var& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  fact_var(fact_var&& from) noexcept
    : fact_var() {
    *this = ::std::move(from);
  }

  inline fact_var& operator=(fact_var&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const fact_var& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const fact_var* internal_default_instance() {
    return reinterpret_cast<const fact_var*>(
               &_fact_var_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(fact_var* other);
  friend void swap(fact_var& a, fact_var& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline fact_var* New() const PROTOBUF_FINAL { return New(NULL); }

  fact_var* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const fact_var& from);
  void MergeFrom(const fact_var& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(fact_var* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes file = 1;
  void clear_file();
  static const int kFileFieldNumber = 1;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const void* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // bytes var_name = 2;
  void clear_var_name();
  static const int kVarNameFieldNumber = 2;
  const ::std::string& var_name() const;
  void set_var_name(const ::std::string& value);
  #if LANG_CXX11
  void set_var_name(::std::string&& value);
  #endif
  void set_var_name(const char* value);
  void set_var_name(const void* value, size_t size);
  ::std::string* mutable_var_name();
  ::std::string* release_var_name();
  void set_allocated_var_name(::std::string* var_name);

  // bytes var_val = 3;
  void clear_var_val();
  static const int kVarValFieldNumber = 3;
  const ::std::string& var_val() const;
  void set_var_val(const ::std::string& value);
  #if LANG_CXX11
  void set_var_val(::std::string&& value);
  #endif
  void set_var_val(const char* value);
  void set_var_val(const void* value, size_t size);
  ::std::string* mutable_var_val();
  ::std::string* release_var_val();
  void set_allocated_var_val(::std::string* var_val);

  // @@protoc_insertion_point(class_scope:buaa.file.fact_var)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  ::google::protobuf::internal::ArenaStringPtr var_name_;
  ::google::protobuf::internal::ArenaStringPtr var_val_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_2eproto::TableStruct;
  friend void ::protobuf_file_2eproto::InitDefaultsfact_varImpl();
};
// -------------------------------------------------------------------

class mapper : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buaa.file.mapper) */ {
 public:
  mapper();
  virtual ~mapper();

  mapper(const mapper& from);

  inline mapper& operator=(const mapper& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mapper(mapper&& from) noexcept
    : mapper() {
    *this = ::std::move(from);
  }

  inline mapper& operator=(mapper&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const mapper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mapper* internal_default_instance() {
    return reinterpret_cast<const mapper*>(
               &_mapper_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(mapper* other);
  friend void swap(mapper& a, mapper& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mapper* New() const PROTOBUF_FINAL { return New(NULL); }

  mapper* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const mapper& from);
  void MergeFrom(const mapper& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(mapper* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes template = 1;
  void clear_template_();
  static const int kTemplateFieldNumber = 1;
  const ::std::string& template_() const;
  void set_template_(const ::std::string& value);
  #if LANG_CXX11
  void set_template_(::std::string&& value);
  #endif
  void set_template_(const char* value);
  void set_template_(const void* value, size_t size);
  ::std::string* mutable_template_();
  ::std::string* release_template_();
  void set_allocated_template_(::std::string* template_);

  // bytes slot = 2;
  void clear_slot();
  static const int kSlotFieldNumber = 2;
  const ::std::string& slot() const;
  void set_slot(const ::std::string& value);
  #if LANG_CXX11
  void set_slot(::std::string&& value);
  #endif
  void set_slot(const char* value);
  void set_slot(const void* value, size_t size);
  ::std::string* mutable_slot();
  ::std::string* release_slot();
  void set_allocated_slot(::std::string* slot);

  // bytes variable = 3;
  void clear_variable();
  static const int kVariableFieldNumber = 3;
  const ::std::string& variable() const;
  void set_variable(const ::std::string& value);
  #if LANG_CXX11
  void set_variable(::std::string&& value);
  #endif
  void set_variable(const char* value);
  void set_variable(const void* value, size_t size);
  ::std::string* mutable_variable();
  ::std::string* release_variable();
  void set_allocated_variable(::std::string* variable);

  // @@protoc_insertion_point(class_scope:buaa.file.mapper)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr template__;
  ::google::protobuf::internal::ArenaStringPtr slot_;
  ::google::protobuf::internal::ArenaStringPtr variable_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_2eproto::TableStruct;
  friend void ::protobuf_file_2eproto::InitDefaultsmapperImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// rule_file_info

// bytes file_name = 1;
inline void rule_file_info::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rule_file_info::file_name() const {
  // @@protoc_insertion_point(field_get:buaa.file.rule_file_info.file_name)
  return file_name_.GetNoArena();
}
inline void rule_file_info::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buaa.file.rule_file_info.file_name)
}
#if LANG_CXX11
inline void rule_file_info::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buaa.file.rule_file_info.file_name)
}
#endif
inline void rule_file_info::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buaa.file.rule_file_info.file_name)
}
inline void rule_file_info::set_file_name(const void* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buaa.file.rule_file_info.file_name)
}
inline ::std::string* rule_file_info::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:buaa.file.rule_file_info.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rule_file_info::release_file_name() {
  // @@protoc_insertion_point(field_release:buaa.file.rule_file_info.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rule_file_info::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:buaa.file.rule_file_info.file_name)
}

// bytes file_desc = 2;
inline void rule_file_info::clear_file_desc() {
  file_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rule_file_info::file_desc() const {
  // @@protoc_insertion_point(field_get:buaa.file.rule_file_info.file_desc)
  return file_desc_.GetNoArena();
}
inline void rule_file_info::set_file_desc(const ::std::string& value) {
  
  file_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buaa.file.rule_file_info.file_desc)
}
#if LANG_CXX11
inline void rule_file_info::set_file_desc(::std::string&& value) {
  
  file_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buaa.file.rule_file_info.file_desc)
}
#endif
inline void rule_file_info::set_file_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buaa.file.rule_file_info.file_desc)
}
inline void rule_file_info::set_file_desc(const void* value, size_t size) {
  
  file_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buaa.file.rule_file_info.file_desc)
}
inline ::std::string* rule_file_info::mutable_file_desc() {
  
  // @@protoc_insertion_point(field_mutable:buaa.file.rule_file_info.file_desc)
  return file_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rule_file_info::release_file_desc() {
  // @@protoc_insertion_point(field_release:buaa.file.rule_file_info.file_desc)
  
  return file_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rule_file_info::set_allocated_file_desc(::std::string* file_desc) {
  if (file_desc != NULL) {
    
  } else {
    
  }
  file_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_desc);
  // @@protoc_insertion_point(field_set_allocated:buaa.file.rule_file_info.file_desc)
}

// bytes create_time = 3;
inline void rule_file_info::clear_create_time() {
  create_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rule_file_info::create_time() const {
  // @@protoc_insertion_point(field_get:buaa.file.rule_file_info.create_time)
  return create_time_.GetNoArena();
}
inline void rule_file_info::set_create_time(const ::std::string& value) {
  
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buaa.file.rule_file_info.create_time)
}
#if LANG_CXX11
inline void rule_file_info::set_create_time(::std::string&& value) {
  
  create_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buaa.file.rule_file_info.create_time)
}
#endif
inline void rule_file_info::set_create_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buaa.file.rule_file_info.create_time)
}
inline void rule_file_info::set_create_time(const void* value, size_t size) {
  
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buaa.file.rule_file_info.create_time)
}
inline ::std::string* rule_file_info::mutable_create_time() {
  
  // @@protoc_insertion_point(field_mutable:buaa.file.rule_file_info.create_time)
  return create_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rule_file_info::release_create_time() {
  // @@protoc_insertion_point(field_release:buaa.file.rule_file_info.create_time)
  
  return create_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rule_file_info::set_allocated_create_time(::std::string* create_time) {
  if (create_time != NULL) {
    
  } else {
    
  }
  create_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), create_time);
  // @@protoc_insertion_point(field_set_allocated:buaa.file.rule_file_info.create_time)
}

// -------------------------------------------------------------------

// rule_file_chk

// bool ischeck = 1;
inline void rule_file_chk::clear_ischeck() {
  ischeck_ = false;
}
inline bool rule_file_chk::ischeck() const {
  // @@protoc_insertion_point(field_get:buaa.file.rule_file_chk.ischeck)
  return ischeck_;
}
inline void rule_file_chk::set_ischeck(bool value) {
  
  ischeck_ = value;
  // @@protoc_insertion_point(field_set:buaa.file.rule_file_chk.ischeck)
}

// bytes filename = 2;
inline void rule_file_chk::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rule_file_chk::filename() const {
  // @@protoc_insertion_point(field_get:buaa.file.rule_file_chk.filename)
  return filename_.GetNoArena();
}
inline void rule_file_chk::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buaa.file.rule_file_chk.filename)
}
#if LANG_CXX11
inline void rule_file_chk::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buaa.file.rule_file_chk.filename)
}
#endif
inline void rule_file_chk::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buaa.file.rule_file_chk.filename)
}
inline void rule_file_chk::set_filename(const void* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buaa.file.rule_file_chk.filename)
}
inline ::std::string* rule_file_chk::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:buaa.file.rule_file_chk.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rule_file_chk::release_filename() {
  // @@protoc_insertion_point(field_release:buaa.file.rule_file_chk.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rule_file_chk::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:buaa.file.rule_file_chk.filename)
}

// -------------------------------------------------------------------

// rule_names

// bytes rule_name = 1;
inline void rule_names::clear_rule_name() {
  rule_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rule_names::rule_name() const {
  // @@protoc_insertion_point(field_get:buaa.file.rule_names.rule_name)
  return rule_name_.GetNoArena();
}
inline void rule_names::set_rule_name(const ::std::string& value) {
  
  rule_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buaa.file.rule_names.rule_name)
}
#if LANG_CXX11
inline void rule_names::set_rule_name(::std::string&& value) {
  
  rule_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buaa.file.rule_names.rule_name)
}
#endif
inline void rule_names::set_rule_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rule_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buaa.file.rule_names.rule_name)
}
inline void rule_names::set_rule_name(const void* value, size_t size) {
  
  rule_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buaa.file.rule_names.rule_name)
}
inline ::std::string* rule_names::mutable_rule_name() {
  
  // @@protoc_insertion_point(field_mutable:buaa.file.rule_names.rule_name)
  return rule_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rule_names::release_rule_name() {
  // @@protoc_insertion_point(field_release:buaa.file.rule_names.rule_name)
  
  return rule_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rule_names::set_allocated_rule_name(::std::string* rule_name) {
  if (rule_name != NULL) {
    
  } else {
    
  }
  rule_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rule_name);
  // @@protoc_insertion_point(field_set_allocated:buaa.file.rule_names.rule_name)
}

// -------------------------------------------------------------------

// fact_names

// bytes fact_name = 1;
inline void fact_names::clear_fact_name() {
  fact_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& fact_names::fact_name() const {
  // @@protoc_insertion_point(field_get:buaa.file.fact_names.fact_name)
  return fact_name_.GetNoArena();
}
inline void fact_names::set_fact_name(const ::std::string& value) {
  
  fact_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buaa.file.fact_names.fact_name)
}
#if LANG_CXX11
inline void fact_names::set_fact_name(::std::string&& value) {
  
  fact_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buaa.file.fact_names.fact_name)
}
#endif
inline void fact_names::set_fact_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fact_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buaa.file.fact_names.fact_name)
}
inline void fact_names::set_fact_name(const void* value, size_t size) {
  
  fact_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buaa.file.fact_names.fact_name)
}
inline ::std::string* fact_names::mutable_fact_name() {
  
  // @@protoc_insertion_point(field_mutable:buaa.file.fact_names.fact_name)
  return fact_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fact_names::release_fact_name() {
  // @@protoc_insertion_point(field_release:buaa.file.fact_names.fact_name)
  
  return fact_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fact_names::set_allocated_fact_name(::std::string* fact_name) {
  if (fact_name != NULL) {
    
  } else {
    
  }
  fact_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fact_name);
  // @@protoc_insertion_point(field_set_allocated:buaa.file.fact_names.fact_name)
}

// -------------------------------------------------------------------

// fact_file_info

// bytes file_name = 1;
inline void fact_file_info::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& fact_file_info::file_name() const {
  // @@protoc_insertion_point(field_get:buaa.file.fact_file_info.file_name)
  return file_name_.GetNoArena();
}
inline void fact_file_info::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buaa.file.fact_file_info.file_name)
}
#if LANG_CXX11
inline void fact_file_info::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buaa.file.fact_file_info.file_name)
}
#endif
inline void fact_file_info::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buaa.file.fact_file_info.file_name)
}
inline void fact_file_info::set_file_name(const void* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buaa.file.fact_file_info.file_name)
}
inline ::std::string* fact_file_info::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:buaa.file.fact_file_info.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fact_file_info::release_file_name() {
  // @@protoc_insertion_point(field_release:buaa.file.fact_file_info.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fact_file_info::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:buaa.file.fact_file_info.file_name)
}

// bytes file_desc = 2;
inline void fact_file_info::clear_file_desc() {
  file_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& fact_file_info::file_desc() const {
  // @@protoc_insertion_point(field_get:buaa.file.fact_file_info.file_desc)
  return file_desc_.GetNoArena();
}
inline void fact_file_info::set_file_desc(const ::std::string& value) {
  
  file_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buaa.file.fact_file_info.file_desc)
}
#if LANG_CXX11
inline void fact_file_info::set_file_desc(::std::string&& value) {
  
  file_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buaa.file.fact_file_info.file_desc)
}
#endif
inline void fact_file_info::set_file_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buaa.file.fact_file_info.file_desc)
}
inline void fact_file_info::set_file_desc(const void* value, size_t size) {
  
  file_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buaa.file.fact_file_info.file_desc)
}
inline ::std::string* fact_file_info::mutable_file_desc() {
  
  // @@protoc_insertion_point(field_mutable:buaa.file.fact_file_info.file_desc)
  return file_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fact_file_info::release_file_desc() {
  // @@protoc_insertion_point(field_release:buaa.file.fact_file_info.file_desc)
  
  return file_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fact_file_info::set_allocated_file_desc(::std::string* file_desc) {
  if (file_desc != NULL) {
    
  } else {
    
  }
  file_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_desc);
  // @@protoc_insertion_point(field_set_allocated:buaa.file.fact_file_info.file_desc)
}

// bytes create_time = 3;
inline void fact_file_info::clear_create_time() {
  create_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& fact_file_info::create_time() const {
  // @@protoc_insertion_point(field_get:buaa.file.fact_file_info.create_time)
  return create_time_.GetNoArena();
}
inline void fact_file_info::set_create_time(const ::std::string& value) {
  
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buaa.file.fact_file_info.create_time)
}
#if LANG_CXX11
inline void fact_file_info::set_create_time(::std::string&& value) {
  
  create_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buaa.file.fact_file_info.create_time)
}
#endif
inline void fact_file_info::set_create_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buaa.file.fact_file_info.create_time)
}
inline void fact_file_info::set_create_time(const void* value, size_t size) {
  
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buaa.file.fact_file_info.create_time)
}
inline ::std::string* fact_file_info::mutable_create_time() {
  
  // @@protoc_insertion_point(field_mutable:buaa.file.fact_file_info.create_time)
  return create_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fact_file_info::release_create_time() {
  // @@protoc_insertion_point(field_release:buaa.file.fact_file_info.create_time)
  
  return create_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fact_file_info::set_allocated_create_time(::std::string* create_time) {
  if (create_time != NULL) {
    
  } else {
    
  }
  create_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), create_time);
  // @@protoc_insertion_point(field_set_allocated:buaa.file.fact_file_info.create_time)
}

// -------------------------------------------------------------------

// fact_file_chk

// bool ischeck = 1;
inline void fact_file_chk::clear_ischeck() {
  ischeck_ = false;
}
inline bool fact_file_chk::ischeck() const {
  // @@protoc_insertion_point(field_get:buaa.file.fact_file_chk.ischeck)
  return ischeck_;
}
inline void fact_file_chk::set_ischeck(bool value) {
  
  ischeck_ = value;
  // @@protoc_insertion_point(field_set:buaa.file.fact_file_chk.ischeck)
}

// bytes filename = 2;
inline void fact_file_chk::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& fact_file_chk::filename() const {
  // @@protoc_insertion_point(field_get:buaa.file.fact_file_chk.filename)
  return filename_.GetNoArena();
}
inline void fact_file_chk::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buaa.file.fact_file_chk.filename)
}
#if LANG_CXX11
inline void fact_file_chk::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buaa.file.fact_file_chk.filename)
}
#endif
inline void fact_file_chk::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buaa.file.fact_file_chk.filename)
}
inline void fact_file_chk::set_filename(const void* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buaa.file.fact_file_chk.filename)
}
inline ::std::string* fact_file_chk::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:buaa.file.fact_file_chk.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fact_file_chk::release_filename() {
  // @@protoc_insertion_point(field_release:buaa.file.fact_file_chk.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fact_file_chk::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:buaa.file.fact_file_chk.filename)
}

// -------------------------------------------------------------------

// fact_list

// bytes template_name = 1;
inline void fact_list::clear_template_name() {
  template_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& fact_list::template_name() const {
  // @@protoc_insertion_point(field_get:buaa.file.fact_list.template_name)
  return template_name_.GetNoArena();
}
inline void fact_list::set_template_name(const ::std::string& value) {
  
  template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buaa.file.fact_list.template_name)
}
#if LANG_CXX11
inline void fact_list::set_template_name(::std::string&& value) {
  
  template_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buaa.file.fact_list.template_name)
}
#endif
inline void fact_list::set_template_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buaa.file.fact_list.template_name)
}
inline void fact_list::set_template_name(const void* value, size_t size) {
  
  template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buaa.file.fact_list.template_name)
}
inline ::std::string* fact_list::mutable_template_name() {
  
  // @@protoc_insertion_point(field_mutable:buaa.file.fact_list.template_name)
  return template_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fact_list::release_template_name() {
  // @@protoc_insertion_point(field_release:buaa.file.fact_list.template_name)
  
  return template_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fact_list::set_allocated_template_name(::std::string* template_name) {
  if (template_name != NULL) {
    
  } else {
    
  }
  template_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), template_name);
  // @@protoc_insertion_point(field_set_allocated:buaa.file.fact_list.template_name)
}

// bytes slot_name = 2;
inline void fact_list::clear_slot_name() {
  slot_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& fact_list::slot_name() const {
  // @@protoc_insertion_point(field_get:buaa.file.fact_list.slot_name)
  return slot_name_.GetNoArena();
}
inline void fact_list::set_slot_name(const ::std::string& value) {
  
  slot_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buaa.file.fact_list.slot_name)
}
#if LANG_CXX11
inline void fact_list::set_slot_name(::std::string&& value) {
  
  slot_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buaa.file.fact_list.slot_name)
}
#endif
inline void fact_list::set_slot_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  slot_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buaa.file.fact_list.slot_name)
}
inline void fact_list::set_slot_name(const void* value, size_t size) {
  
  slot_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buaa.file.fact_list.slot_name)
}
inline ::std::string* fact_list::mutable_slot_name() {
  
  // @@protoc_insertion_point(field_mutable:buaa.file.fact_list.slot_name)
  return slot_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fact_list::release_slot_name() {
  // @@protoc_insertion_point(field_release:buaa.file.fact_list.slot_name)
  
  return slot_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fact_list::set_allocated_slot_name(::std::string* slot_name) {
  if (slot_name != NULL) {
    
  } else {
    
  }
  slot_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slot_name);
  // @@protoc_insertion_point(field_set_allocated:buaa.file.fact_list.slot_name)
}

// -------------------------------------------------------------------

// fact_var

// bytes file = 1;
inline void fact_var::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& fact_var::file() const {
  // @@protoc_insertion_point(field_get:buaa.file.fact_var.file)
  return file_.GetNoArena();
}
inline void fact_var::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buaa.file.fact_var.file)
}
#if LANG_CXX11
inline void fact_var::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buaa.file.fact_var.file)
}
#endif
inline void fact_var::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buaa.file.fact_var.file)
}
inline void fact_var::set_file(const void* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buaa.file.fact_var.file)
}
inline ::std::string* fact_var::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:buaa.file.fact_var.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fact_var::release_file() {
  // @@protoc_insertion_point(field_release:buaa.file.fact_var.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fact_var::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:buaa.file.fact_var.file)
}

// bytes var_name = 2;
inline void fact_var::clear_var_name() {
  var_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& fact_var::var_name() const {
  // @@protoc_insertion_point(field_get:buaa.file.fact_var.var_name)
  return var_name_.GetNoArena();
}
inline void fact_var::set_var_name(const ::std::string& value) {
  
  var_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buaa.file.fact_var.var_name)
}
#if LANG_CXX11
inline void fact_var::set_var_name(::std::string&& value) {
  
  var_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buaa.file.fact_var.var_name)
}
#endif
inline void fact_var::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  var_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buaa.file.fact_var.var_name)
}
inline void fact_var::set_var_name(const void* value, size_t size) {
  
  var_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buaa.file.fact_var.var_name)
}
inline ::std::string* fact_var::mutable_var_name() {
  
  // @@protoc_insertion_point(field_mutable:buaa.file.fact_var.var_name)
  return var_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fact_var::release_var_name() {
  // @@protoc_insertion_point(field_release:buaa.file.fact_var.var_name)
  
  return var_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fact_var::set_allocated_var_name(::std::string* var_name) {
  if (var_name != NULL) {
    
  } else {
    
  }
  var_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), var_name);
  // @@protoc_insertion_point(field_set_allocated:buaa.file.fact_var.var_name)
}

// bytes var_val = 3;
inline void fact_var::clear_var_val() {
  var_val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& fact_var::var_val() const {
  // @@protoc_insertion_point(field_get:buaa.file.fact_var.var_val)
  return var_val_.GetNoArena();
}
inline void fact_var::set_var_val(const ::std::string& value) {
  
  var_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buaa.file.fact_var.var_val)
}
#if LANG_CXX11
inline void fact_var::set_var_val(::std::string&& value) {
  
  var_val_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buaa.file.fact_var.var_val)
}
#endif
inline void fact_var::set_var_val(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  var_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buaa.file.fact_var.var_val)
}
inline void fact_var::set_var_val(const void* value, size_t size) {
  
  var_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buaa.file.fact_var.var_val)
}
inline ::std::string* fact_var::mutable_var_val() {
  
  // @@protoc_insertion_point(field_mutable:buaa.file.fact_var.var_val)
  return var_val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fact_var::release_var_val() {
  // @@protoc_insertion_point(field_release:buaa.file.fact_var.var_val)
  
  return var_val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fact_var::set_allocated_var_val(::std::string* var_val) {
  if (var_val != NULL) {
    
  } else {
    
  }
  var_val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), var_val);
  // @@protoc_insertion_point(field_set_allocated:buaa.file.fact_var.var_val)
}

// -------------------------------------------------------------------

// mapper

// bytes template = 1;
inline void mapper::clear_template_() {
  template__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mapper::template_() const {
  // @@protoc_insertion_point(field_get:buaa.file.mapper.template)
  return template__.GetNoArena();
}
inline void mapper::set_template_(const ::std::string& value) {
  
  template__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buaa.file.mapper.template)
}
#if LANG_CXX11
inline void mapper::set_template_(::std::string&& value) {
  
  template__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buaa.file.mapper.template)
}
#endif
inline void mapper::set_template_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  template__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buaa.file.mapper.template)
}
inline void mapper::set_template_(const void* value, size_t size) {
  
  template__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buaa.file.mapper.template)
}
inline ::std::string* mapper::mutable_template_() {
  
  // @@protoc_insertion_point(field_mutable:buaa.file.mapper.template)
  return template__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mapper::release_template_() {
  // @@protoc_insertion_point(field_release:buaa.file.mapper.template)
  
  return template__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mapper::set_allocated_template_(::std::string* template_) {
  if (template_ != NULL) {
    
  } else {
    
  }
  template__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), template_);
  // @@protoc_insertion_point(field_set_allocated:buaa.file.mapper.template)
}

// bytes slot = 2;
inline void mapper::clear_slot() {
  slot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mapper::slot() const {
  // @@protoc_insertion_point(field_get:buaa.file.mapper.slot)
  return slot_.GetNoArena();
}
inline void mapper::set_slot(const ::std::string& value) {
  
  slot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buaa.file.mapper.slot)
}
#if LANG_CXX11
inline void mapper::set_slot(::std::string&& value) {
  
  slot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buaa.file.mapper.slot)
}
#endif
inline void mapper::set_slot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  slot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buaa.file.mapper.slot)
}
inline void mapper::set_slot(const void* value, size_t size) {
  
  slot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buaa.file.mapper.slot)
}
inline ::std::string* mapper::mutable_slot() {
  
  // @@protoc_insertion_point(field_mutable:buaa.file.mapper.slot)
  return slot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mapper::release_slot() {
  // @@protoc_insertion_point(field_release:buaa.file.mapper.slot)
  
  return slot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mapper::set_allocated_slot(::std::string* slot) {
  if (slot != NULL) {
    
  } else {
    
  }
  slot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slot);
  // @@protoc_insertion_point(field_set_allocated:buaa.file.mapper.slot)
}

// bytes variable = 3;
inline void mapper::clear_variable() {
  variable_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mapper::variable() const {
  // @@protoc_insertion_point(field_get:buaa.file.mapper.variable)
  return variable_.GetNoArena();
}
inline void mapper::set_variable(const ::std::string& value) {
  
  variable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buaa.file.mapper.variable)
}
#if LANG_CXX11
inline void mapper::set_variable(::std::string&& value) {
  
  variable_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buaa.file.mapper.variable)
}
#endif
inline void mapper::set_variable(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  variable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buaa.file.mapper.variable)
}
inline void mapper::set_variable(const void* value, size_t size) {
  
  variable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buaa.file.mapper.variable)
}
inline ::std::string* mapper::mutable_variable() {
  
  // @@protoc_insertion_point(field_mutable:buaa.file.mapper.variable)
  return variable_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mapper::release_variable() {
  // @@protoc_insertion_point(field_release:buaa.file.mapper.variable)
  
  return variable_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mapper::set_allocated_variable(::std::string* variable) {
  if (variable != NULL) {
    
  } else {
    
  }
  variable_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), variable);
  // @@protoc_insertion_point(field_set_allocated:buaa.file.mapper.variable)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace file
}  // namespace buaa

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_file_2eproto__INCLUDED
